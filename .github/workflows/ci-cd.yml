# ‡∏ä‡∏∑‡πà‡∏≠: CI/CD ‡∏û‡∏£‡πâ‡∏≠‡∏° Cache ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production
name: CI/CD with Cache and Optimizations (Production Ready)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ workflow ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
on:
  push:
    branches:
      - main  # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch main
  pull_request:
    types: [opened, synchronize, reopened]  # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PR ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ update PR

jobs:
  # Job ‡πÅ‡∏£‡∏Å: ‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡πâ‡∏î
  build-and-test:
    name: Build, Test and Analyze
    runs-on: ubuntu-24.04  # ‡πÉ‡∏ä‡πâ Ubuntu 24.04 ‡πÄ‡∏õ‡πá‡∏ô environment
    steps:
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î history ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SonarCloud

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js ‡∏û‡∏£‡πâ‡∏≠‡∏° cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö npm
      - name: Set up Node.js with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: "18"  # ‡πÉ‡∏ä‡πâ Node.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 18
          cache: "npm"        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö npm

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: Cache node_modules ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules  # path ‡∏ó‡∏µ‡πà‡∏à‡∏∞ cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}  # key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏ cache
          restore-keys: |
            ${{ runner.os }}-node-  # fallback key ‡∏´‡∏≤‡∏Å exact match ‡πÑ‡∏°‡πà‡∏û‡∏ö

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô cache)
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô cache
        run: npm ci  # ‡πÉ‡∏ä‡πâ npm ci ‡πÅ‡∏ó‡∏ô npm install ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ cache
      - name: Show message if dependencies are restored from cache
        if: steps.cache-node-modules.outputs.cache-hit == 'true'  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ cache
        run: echo "‚úÖ Dependencies restored from cache. Skipping installation."

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      - name: Run security audit
        run: npm audit --audit-level=moderate  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö vulnerability ‡∏£‡∏∞‡∏î‡∏±‡∏ö moderate ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        continue-on-error: false # <--- ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏´‡∏¢‡∏∏‡∏î workflow ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      - name: Run tests
        run: npm run test:ci # <--- ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏´‡∏¢‡∏∏‡∏î workflow ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        env:
          NODE_ENV: test  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î environment ‡πÄ‡∏õ‡πá‡∏ô test

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SonarCloud
        with:
          projectBaseDir: .  # directory ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå

  # Job ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á: Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Cloud Run
  deploy:
    name: Deploy to Cloud Run
    needs: build-and-test # <--- Job ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ build-and-test ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    runs-on: ubuntu-24.04
    # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á main branch ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment
      - name: Checkout code
        uses: actions/checkout@v4

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"  # Service Account Key

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}  # GCP Project ID

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --source . \                                    # ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å current directory
            --region ${{ secrets.GCP_REGION }} \           # region ‡∏ó‡∏µ‡πà‡∏à‡∏∞ deploy
            --platform managed \                           # ‡πÉ‡∏ä‡πâ fully managed Cloud Run
            --allow-unauthenticated \                      # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authentication
            --memory 512Mi \                               # ‡∏à‡∏≥‡∏Å‡∏±‡∏î memory ‡∏ó‡∏µ‡πà 512MB
            --cpu 1 \                                      # ‡πÉ‡∏ä‡πâ 1 CPU
            --max-instances 5 \                            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô instance ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà 5
            --timeout 300 \                                # timeout 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (5 ‡∏ô‡∏≤‡∏ó‡∏µ)
            --concurrency 80 \                             # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô request ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠ instance
            --set-env-vars NODE_ENV=production,NODE_OPTIONS=--experimental-vm-modules \ # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variables
            --quiet                                        # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° interactive

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏£‡∏±‡∏ö URL ‡∏Ç‡∏≠‡∏á service ‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß
      - name: Get deployment URL
        id: get_url
        run: |
          # ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á service ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á deploy
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)')
          # ‡πÄ‡∏Å‡πá‡∏ö URL ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô output ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Application deployed successfully!"
          echo "üì± Service URL: $SERVICE_URL"

      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ deploy ‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      - name: Verify deployment (Improved)
        run: |
          SERVICE_URL="${{ steps.get_url.outputs.SERVICE_URL }}"
          echo "Waiting for service to be ready..."
          
          # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡∏ã‡πâ‡∏≥
          max_attempts=12      # ‡∏•‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 12 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          attempt_num=1        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1
          wait_seconds=10      # ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          
          # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö health check
          while [ $attempt_num -le $max_attempts ]; do
            echo "Attempt $attempt_num/$max_attempts: Testing health endpoint $SERVICE_URL/health"
            # ‡∏™‡πà‡∏á HTTP request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á /health endpoint
            response_code=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health")
            
            # ‡∏ñ‡πâ‡∏≤ response code ‡πÄ‡∏õ‡πá‡∏ô 200 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if [ "$response_code" -eq 200 ]; then
              echo "‚úÖ Health check successful!"
              exit 0  # ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            fi
            
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            echo "Health check failed with status $response_code. Waiting $wait_seconds seconds..."
            sleep $wait_seconds
            attempt_num=$((attempt_num+1))
          done
          
          # ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          echo "‚ö†Ô∏è Health check failed after $max_attempts attempts."
          exit 1 # <--- ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Workflow fail ‡∏ñ‡πâ‡∏≤ health check ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß