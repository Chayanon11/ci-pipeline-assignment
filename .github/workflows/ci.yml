# Workflow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD ‡∏ö‡∏ô GitHub Actions
name: CI with SonarCloud + Deploy to GCP # ‡∏ä‡∏∑‡πà‡∏≠ Workflow ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Actions

on:
  push:
    branches:
      - main # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch main
  pull_request:
    types: [opened, synchronize, reopened] # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î PR ‡πÉ‡∏´‡∏°‡πà

jobs:
  build-and-test:
    name: Build, Test and Analyze # ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô CI: Build, Test ‡πÅ‡∏•‡∏∞ Code Analysis
    runs-on: ubuntu-24.04 # ‡πÉ‡∏ä‡πâ runner Ubuntu ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å GitHub repository
        with:
          fetch-depth: 0 # ‡∏î‡∏∂‡∏á commit history ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ SonarCloud ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

      - name: Set up Node.js
        uses: actions/setup-node@v4 # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js ‡∏ö‡∏ô runner
        with:
          node-version: "18" # ‡πÉ‡∏ä‡πâ Node.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 18
          cache: "npm" # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ npm cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

      - name: Install dependencies
        run: npm ci # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ npm install)

      - name: Run security audit
        run: npm audit --audit-level=moderate # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö security vulnerabilities
        continue-on-error: false # ‡∏´‡∏¢‡∏∏‡∏î workflow ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

      - name: Run tests
        run: npm run test:ci # ‡∏£‡∏±‡∏ô unit tests ‡∏û‡∏£‡πâ‡∏≠‡∏° coverage report
        env:
          NODE_ENV: test # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏õ‡πá‡∏ô test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0 # ‡πÉ‡∏ä‡πâ SonarCloud Action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö code quality analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PR analysis
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # SonarCloud token ‡∏à‡∏≤‡∏Å GitHub Secrets
        with:
          projectBaseDir: . # ‡∏£‡∏∞‡∏ö‡∏∏ root directory ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ

  deploy:
    name: Deploy to Cloud Run # ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô: Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Cloud Run
    needs: build-and-test # ‡∏£‡∏≠‡πÉ‡∏´‡πâ job build-and-test ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    runs-on: ubuntu-24.04 # ‡πÉ‡∏ä‡πâ runner Ubuntu ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Deploy ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2 # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Cloud
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}" # ‡πÉ‡∏ä‡πâ Service Account key ‡∏à‡∏≤‡∏Å GitHub Secrets

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2 # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ gcloud CLI
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }} # ‡∏£‡∏∞‡∏ö‡∏∏ Google Cloud Project ID

      - name: Deploy to Cloud Run
        run: | # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloud Run (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç CPU ‡πÄ‡∏õ‡πá‡∏ô 1)
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --source . \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --timeout 300 \
            --concurrency 80 \
            --set-env-vars NODE_ENV=production,NODE_OPTIONS=--experimental-vm-modules \
            --quiet

      - name: Get deployment URL
        run: | # ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á service ‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)')
          echo "üöÄ Application deployed successfully!" # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          echo "üì± Service URL: $SERVICE_URL" # ‡πÅ‡∏™‡∏î‡∏á URL ‡∏Ç‡∏≠‡∏á service
          echo "üè• Health Check: $SERVICE_URL/health" # ‡πÅ‡∏™‡∏î‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check

      - name: Verify deployment
        run: | # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ deployment ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)')
          echo "Waiting 30 seconds for service to be ready..." # ‡∏£‡∏≠‡πÉ‡∏´‡πâ service ‡∏û‡∏£‡πâ‡∏≠‡∏°
          sleep 30 # ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
          echo "Testing health endpoint..." # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö health endpoint
          curl -f "$SERVICE_URL/health" || echo "‚ö†Ô∏è Health check failed, but deployment completed"
