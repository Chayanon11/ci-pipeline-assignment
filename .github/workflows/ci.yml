# name: CI with SonarCloud # ‡∏ä‡∏∑‡πà‡∏≠ Workflow ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Actions

# on:
#   push:
#     branches:
#       - main # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch main
#   pull_request:
#     types: [opened, synchronize, reopened] # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PR

# jobs:
#   build:
#     name: Build and Analyze # ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô workflow ‡∏ô‡∏µ‡πâ
#     runs-on: ubuntu-latest # ‡πÉ‡∏ä‡πâ runner ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Ubuntu version ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4 # ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å GitHub repository (updated to v4)
#         with:
#           fetch-depth: 0 # ‡∏î‡∏∂‡∏á commit history ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Sonar ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå new code ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

#       - name: Set up Node.js
#         uses: actions/setup-node@v4 # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js ‡∏ö‡∏ô runner (updated to v4)
#         with:
#           node-version: "18" # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Node.js ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
#           cache: "npm" # ‡πÄ‡∏û‡∏¥‡πà‡∏° npm cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

#       - name: Install dependencies
#         run: npm ci # ‡πÉ‡∏ä‡πâ npm ci ‡πÅ‡∏ó‡∏ô npm install ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠

#       - name: Run security audit
#         run: npm audit --audit-level=moderate # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö security vulnerabilities
#         continue-on-error: false # ‡∏´‡∏¢‡∏∏‡∏î workflow ‡∏´‡∏≤‡∏Å‡∏û‡∏ö vulnerability

#       - name: Run tests
#         run: npm run test:ci # ‡∏£‡∏±‡∏ô unit tests ‡∏û‡∏£‡πâ‡∏≠‡∏° coverage report
#         env:
#           NODE_ENV: test # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏õ‡πá‡∏ô test

#       - name: SonarCloud Scan
#         uses: SonarSource/sonarcloud-github-action@v2.3.0 # ‡πÉ‡∏ä‡πâ Action ‡∏Ç‡∏≠‡∏á SonarCloud ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PR analysis
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # ‡πÉ‡∏ä‡πâ token ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô GitHub Secret
#         with:
#           projectBaseDir: . # ‡∏£‡∏∞‡∏ö‡∏∏ root ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå sonar-project.properties

name: CI with SonarCloud + Deploy to GCP

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    name: Build, Test and Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: false

      - name: Run tests
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --source . \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 0.5 \
            --max-instances 5 \
            --timeout 300 \
            --concurrency 80 \
            --set-env-vars NODE_ENV=production,NODE_OPTIONS=--experimental-vm-modules

      - name: Get deployment URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)')
          echo "üöÄ Application deployed successfully!"
          echo "üì± Service URL: $SERVICE_URL"
          echo "üè• Health Check: $SERVICE_URL/health"

      - name: Verify deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)')
          echo "Waiting 30 seconds for service to be ready..."
          sleep 30
          echo "Testing health endpoint..."
          curl -f "$SERVICE_URL/health" || echo "‚ö†Ô∏è Health check failed, but deployment completed"
