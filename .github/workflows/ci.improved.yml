
name: CI with SonarCloud + Deploy to GCP (Optimized & Standardized) # ‡∏ä‡∏∑‡πà‡∏≠ Workflow ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Actions

on:
  push:
    branches:
      - main # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch main
  pull_request:
    types: [opened, synchronize, reopened] # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î PR ‡πÉ‡∏´‡∏°‡πà

jobs:
  build-and-test:
    name: Build, Test and Analyze # ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô CI: Build, Test ‡πÅ‡∏•‡∏∞ Code Analysis
    runs-on: ubuntu-24.04 # ‡πÉ‡∏ä‡πâ runner Ubuntu ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1 - ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å GitHub repository
        with:
          fetch-depth: 0 # ‡∏î‡∏∂‡∏á commit history ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ SonarCloud ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

      - name: Set up Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Node.js ‡∏ö‡∏ô runner
        with:
          node-version: "18" # ‡πÉ‡∏ä‡πâ Node.js ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 18
          cache: "npm" # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ npm global cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@ab5e74ddd6150b37941690929790884114729329 # v4.0.2
        with:
          path: node_modules # Path to cache node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true' # ‡∏£‡∏±‡∏ô npm ci ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ cache hit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö node_modules
        run: npm ci # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ npm install)

      - name: Install dependencies (from cache)
        if: steps.cache-node-modules.outputs.cache-hit == 'true'
        run: echo "Dependencies restored from cache." # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ dependencies ‡∏à‡∏≤‡∏Å cache

      - name: Run security audit
        run: npm audit --audit-level=moderate # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö security vulnerabilities
        continue-on-error: false # ‡∏´‡∏¢‡∏∏‡∏î workflow ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

      - name: Run tests
        run: npm run test:ci # ‡∏£‡∏±‡∏ô unit tests ‡∏û‡∏£‡πâ‡∏≠‡∏° coverage report
        env:
          NODE_ENV: test # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡πÄ‡∏õ‡πá‡∏ô test

      - name: Cache SonarCloud packages
        uses: actions/cache@ab5e74ddd6150b37941690929790884114729329 # v4.0.2
        with:
          path: ~/.sonar/cache # Path to cache for SonarCloud scanner
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/package-lock.json') }} # Key ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏≠‡∏¥‡∏á‡∏Å‡∏±‡∏ö lockfile ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á tool versions ‡∏ó‡∏µ‡πà Sonar ‡πÉ‡∏ä‡πâ
          restore-keys: |
            ${{ runner.os }}-sonar-

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@67dbf889755728758178142b739969a08777d331 # v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PR analysis
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # SonarCloud token ‡∏à‡∏≤‡∏Å GitHub Secrets
        with:
          projectBaseDir: . # ‡∏£‡∏∞‡∏ö‡∏∏ root directory ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ

  deploy:
    name: Deploy to Cloud Run # ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô: Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Cloud Run
    needs: build-and-test # ‡∏£‡∏≠‡πÉ‡∏´‡πâ job build-and-test ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    runs-on: ubuntu-24.04 # ‡πÉ‡∏ä‡πâ runner Ubuntu ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Deploy ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1 - ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö deployment

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@55bd3a7cf7809941d071235f099831014828893c # v2.1.3 - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Cloud
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}" # ‡πÉ‡∏ä‡πâ Service Account key ‡∏à‡∏≤‡∏Å GitHub Secrets

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@2503748709498582100775903891a31f0f902612 # v2.1.0 - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ gcloud CLI
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }} # ‡∏£‡∏∞‡∏ö‡∏∏ Google Cloud Project ID

      - name: Deploy to Cloud Run
        run: | # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloud Run
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --source . \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --timeout 300 \
            --concurrency 80 \
            --set-env-vars NODE_ENV=production,NODE_OPTIONS=--experimental-vm-modules \
            --quiet

      - name: Get deployment URL
        id: get_url # Add an id to this step to reference its output
        run: | # ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á service ‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT # Output for next steps
          echo "üöÄ Application deployed successfully!" # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          echo "üì± Service URL: $SERVICE_URL" # ‡πÅ‡∏™‡∏î‡∏á URL ‡∏Ç‡∏≠‡∏á service
          echo "üè• Health Check: $SERVICE_URL/health" # ‡πÅ‡∏™‡∏î‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check

      - name: Verify deployment
        run: | # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ deployment ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          SERVICE_URL="${{ steps.get_url.outputs.SERVICE_URL }}" # Get URL from previous step
          echo "Waiting for service to be ready..."
          max_attempts=12 # Try for 12 * 10s = 120 seconds (2 minutes)
          attempt_num=1
          wait_seconds=10
          while [ $attempt_num -le $max_attempts ]; do
            echo "Attempt $attempt_num/$max_attempts: Testing health endpoint $SERVICE_URL/health"
            response_code=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health")
            if [ "$response_code" -eq 200 ]; then
              echo "‚úÖ Health check successful!"
              exit 0
            fi
            echo "Health check failed with status $response_code. Waiting $wait_seconds seconds..."
            sleep $wait_seconds
            attempt_num=$((attempt_num+1))
          done
          echo "‚ö†Ô∏è Health check failed after $max_attempts attempts, but deployment completed. Please check the service manually."
          # Optionally, you can make the workflow fail if health check fails after retries:
          # exit 1