name: CI/CD with Cache and Optimizations (improved)

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    name: Build, Test and Analyze
    runs-on: ubuntu-24.04 # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô runner ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm" # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ cache ‡∏Ç‡∏≠‡∏á npm (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö global packages)

      # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠ Cache ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô Install dependencies ---
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4 # ‡πÉ‡∏ä‡πâ Tag ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
        with:
          # ‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ cache
          path: node_modules
          # ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cache: ‡∏ñ‡πâ‡∏≤ package-lock.json ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô, cache ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        # ‡∏£‡∏±‡∏ô "npm ci" ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ cache hit (‡∏´‡∏≤ cache ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠)
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Show message if dependencies are restored from cache
        if: steps.cache-node-modules.outputs.cache-hit == 'true'
        run: echo "‚úÖ Dependencies restored from cache. Skipping installation."
      # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Cache ---

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: false

      - name: Run tests
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .

  deploy:
    name: Deploy to Cloud Run
    needs: build-and-test
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --source . \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 5 \
            --timeout 300 \
            --concurrency 80 \
            --set-env-vars NODE_ENV=production,NODE_OPTIONS=--experimental-vm-modules \
            --quiet

      - name: Get deployment URL
        id: get_url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Application deployed successfully!"
          echo "üì± Service URL: $SERVICE_URL"

      - name: Verify deployment (Improved)
        run: |
          SERVICE_URL="${{ steps.get_url.outputs.SERVICE_URL }}"
          echo "Waiting for service to be ready..."
          max_attempts=12
          attempt_num=1
          wait_seconds=10
          while [ $attempt_num -le $max_attempts ]; do
            echo "Attempt $attempt_num/$max_attempts: Testing health endpoint $SERVICE_URL/health"
            response_code=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health")
            if [ "$response_code" -eq 200 ]; then
              echo "‚úÖ Health check successful!"
              exit 0
            fi
            echo "Health check failed with status $response_code. Waiting $wait_seconds seconds..."
            sleep $wait_seconds
            attempt_num=$((attempt_num+1))
          done
          echo "‚ö†Ô∏è Health check failed after $max_attempts attempts."
          exit 1